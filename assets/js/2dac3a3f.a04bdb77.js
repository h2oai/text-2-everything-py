"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[418],{8453:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>d});var n=a(6540);const s={},c=n.createContext(s);function i(e){const t=n.useContext(c);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(c.Provider,{value:t},e.children)}},9630:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>r,contentTitle:()=>d,default:()=>o,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"guides/schema_metadata","title":"Schema Metadata","description":"Define tables, dimensions, metrics, and relationships for better SQL.","source":"@site/docs/guides/schema_metadata.md","sourceDirName":"guides","slug":"/guides/schema_metadata","permalink":"/text-2-everything-py/guides/schema_metadata","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Schema Metadata"},"sidebar":"defaultSidebar","previous":{"title":"Contexts","permalink":"/text-2-everything-py/guides/contexts"},"next":{"title":"Golden Examples","permalink":"/text-2-everything-py/guides/golden_examples"}}');var s=a(4848),c=a(8453);const i={title:"Schema Metadata"},d=void 0,r={},l=[];function m(e){const t={code:"code",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"Define tables, dimensions, metrics, and relationships for better SQL."}),"\n",(0,s.jsx)(t.p,{children:"Create table schema:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'schema = client.schema_metadata.create(\n    project_id=project.id,\n    name="Users Table",\n    schema_data={\n        "table": {\n            "name": "users",\n            "columns": [\n                {"name": "id", "type": "INTEGER"},\n                {"name": "email", "type": "VARCHAR(255)"}\n            ]\n        }\n    },\n)\n'})}),"\n",(0,s.jsx)(t.p,{children:"Create dimension:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'dimension = client.schema_metadata.create(\n    project_id=project.id,\n    name="User Status",\n    schema_data={\n        "table": {\n            "dimension": {\n                "name": "status",\n                "content": {"type": "categorical", "values": ["active","inactive"]}\n            }\n        }\n    },\n)\n'})}),"\n",(0,s.jsx)(t.p,{children:"Create metric:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'metric = client.schema_metadata.create(\n    project_id=project.id,\n    name="Total Revenue",\n    schema_data={\n        "table": {\n            "metric": {\n                "name": "total_revenue",\n                "content": {"aggregation": "sum", "column": "amount"}\n            }\n        }\n    },\n)\n'})}),"\n",(0,s.jsx)(t.p,{children:"List/get/update/delete:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'schemas = client.schema_metadata.list(project_id=project.id)\none = client.schema_metadata.get(project_id=project.id, schema_metadata_id=schema.id)\nupdated = client.schema_metadata.update(project_id=project.id, schema_metadata_id=schema.id, description="Updated")\nclient.schema_metadata.delete(project_id=project.id, schema_metadata_id=schema.id)\n'})}),"\n",(0,s.jsx)(t.p,{children:"Filter by type:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'tables = client.schema_metadata.list_by_type(project.id, "table")\n'})}),"\n",(0,s.jsx)(t.p,{children:"Bulk create with validation:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'items = [\n  {"name": "t1", "schema_data": {"table": {"name": "t1", "columns": []}}},\n  {"name": "dim1", "schema_data": {"table": {"dimension": {"name": "d", "content": {}}}}},\n]\ncreated = client.schema_metadata.bulk_create(project.id, items, validate=True)\n'})}),"\n",(0,s.jsx)(t.p,{children:"Validation helpers:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'errors = client.schema_metadata.validate_schema({"table": {"name": "users", "columns": []}}, "table")\nstype = client.schema_metadata.get_schema_type({"table": {"name": "users", "columns": []}})\n'})}),"\n",(0,s.jsx)(t.p,{children:"See also: How To \u2192 Validation for required nested fields."})]})}function o(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}}}]);
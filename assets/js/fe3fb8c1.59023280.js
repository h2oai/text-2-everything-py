"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[809],{6282:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"quick-start/developer-starter-guide","title":"Text2Everything Developer & Data Scientist Starter Guide","description":"A practical, step-by-step guide to get you from zero to a fully functional Text2Everything setup with H2O Drive integration, Snowflake connectivity, and CustomGPT configuration.","source":"@site/docs/quick-start/developer-starter-guide.md","sourceDirName":"quick-start","slug":"/quick-start/developer-starter-guide","permalink":"/text2everything/quick-start/developer-starter-guide","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"Text2Everything Quick Start Guides","permalink":"/text2everything/quick-start/"},"next":{"title":"Text2Everything Quick Reference Guide","permalink":"/text2everything/quick-start/quick-reference"}}');var s=t(4848),o=t(8453);const r={},a="Text2Everything Developer & Data Scientist Starter Guide",l={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Prerequisites &amp; Setup",id:"prerequisites--setup",level:2},{value:"Requirements",id:"requirements",level:3},{value:"Installation",id:"installation",level:3},{value:"Environment Setup",id:"environment-setup",level:3},{value:"Step 1: Upload Data to H2O Drive",id:"step-1-upload-data-to-h2o-drive",level:2},{value:"1.1 Connect to H2O Drive",id:"11-connect-to-h2o-drive",level:3},{value:"1.2 Prepare Your Data Structure",id:"12-prepare-your-data-structure",level:3},{value:"1.3 Load and Upload Data",id:"13-load-and-upload-data",level:3},{value:"1.4 Upload to H2O Drive",id:"14-upload-to-h2o-drive",level:3},{value:"Step 2: Configure Text2Everything API",id:"step-2-configure-text2everything-api",level:2},{value:"2.1 Initialize the SDK Client",id:"21-initialize-the-sdk-client",level:3},{value:"2.2 Create or Select a Project",id:"22-create-or-select-a-project",level:3},{value:"2.3 Load Data from H2O Drive",id:"23-load-data-from-h2o-drive",level:3},{value:"2.4 Prepare and Upload Data to Text2Everything",id:"24-prepare-and-upload-data-to-text2everything",level:3},{value:"Step 3: Configure Snowflake Connector",id:"step-3-configure-snowflake-connector",level:2},{value:"3.1 Snowflake Configuration",id:"31-snowflake-configuration",level:3},{value:"3.2 Create Snowflake Connector",id:"32-create-snowflake-connector",level:3},{value:"3.3 List and Manage Connectors",id:"33-list-and-manage-connectors",level:3},{value:"Step 4: Configure CustomGPT",id:"step-4-configure-customgpt",level:2},{value:"4.1 Access H2OGPTE UI",id:"41-access-h2ogpte-ui",level:3},{value:"4.2 Create a Collection",id:"42-create-a-collection",level:3},{value:"4.3 Create Custom Prompt",id:"43-create-custom-prompt",level:3},{value:"Headers",id:"headers",level:3},{value:"Formulate Business-Oriented Response",id:"formulate-business-oriented-response",level:3},{value:"4.4 Configure Tools and Settings",id:"44-configure-tools-and-settings",level:3},{value:"Step 5: Setup Agent Environment",id:"step-5-setup-agent-environment",level:2},{value:"5.1 Access Agent Configuration",id:"51-access-agent-configuration",level:3},{value:"5.2 Configure Authentication",id:"52-configure-authentication",level:3},{value:"5.3 Test the CustomGPT",id:"53-test-the-customgpt",level:3},{value:"End-to-End Workflow Example",id:"end-to-end-workflow-example",level:2},{value:"Complete Integration Test",id:"complete-integration-test",level:3},{value:"Production Usage Example",id:"production-usage-example",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:3},{value:"1. H2O Drive Connection Issues",id:"1-h2o-drive-connection-issues",level:4},{value:"2. Text2Everything API Issues",id:"2-text2everything-api-issues",level:4},{value:"3. Snowflake Connector Issues",id:"3-snowflake-connector-issues",level:4},{value:"4. Data Upload Issues",id:"4-data-upload-issues",level:4},{value:"5. Performance Optimization",id:"5-performance-optimization",level:4},{value:"Getting Help",id:"getting-help",level:3},{value:"Next Steps",id:"next-steps",level:2},{value:"Recommended Next Actions",id:"recommended-next-actions",level:3},{value:"Additional Resources",id:"additional-resources",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"text2everything-developer--data-scientist-starter-guide",children:"Text2Everything Developer & Data Scientist Starter Guide"})}),"\n",(0,s.jsx)(n.p,{children:"A practical, step-by-step guide to get you from zero to a fully functional Text2Everything setup with H2O Drive integration, Snowflake connectivity, and CustomGPT configuration."}),"\n",(0,s.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#prerequisites--setup",children:"Prerequisites & Setup"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#step-1-upload-data-to-h2o-drive",children:"Step 1: Upload Data to H2O Drive"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#step-2-configure-text2everything-api",children:"Step 2: Configure Text2Everything API"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#step-3-configure-snowflake-connector",children:"Step 3: Configure Snowflake Connector"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#step-4-configure-customgpt",children:"Step 4: Configure CustomGPT"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#step-5-setup-agent-environment",children:"Step 5: Setup Agent Environment"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#end-to-end-workflow-example",children:"End-to-End Workflow Example"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#troubleshooting",children:"Troubleshooting"})}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites--setup",children:"Prerequisites & Setup"}),"\n",(0,s.jsx)(n.h3,{id:"requirements",children:"Requirements"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Python 3.9+"}),"\n",(0,s.jsx)(n.li,{children:"H2O Drive access with valid credentials"}),"\n",(0,s.jsx)(n.li,{children:"Text2Everything API access"}),"\n",(0,s.jsx)(n.li,{children:"Snowflake account (optional, for database connectivity)"}),"\n",(0,s.jsx)(n.li,{children:"H2OGPTE UI access"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Install required packages\npip install h2o-drive>=4.1.0\npip install text2everything_sdk-0.1.x-py3-none-any.whl\npip install python-dotenv\npip install tqdm\n"})}),"\n",(0,s.jsx)(n.h3,{id:"environment-setup",children:"Environment Setup"}),"\n",(0,s.jsxs)(n.p,{children:["Create a ",(0,s.jsx)(n.code,{children:".env"})," file in your project root:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# H2O Drive Configuration\nH2O_CLOUD_ENVIRONMENT=https://your-environment.h2o.ai/\nH2O_CLOUD_CLIENT_PLATFORM_TOKEN=your-h2o-token-here\n\n# Text2Everything Configuration\nTEXT2EVERYTHING_URL=http://text2everything.text2everything.svc.cluster.local:8000\nH2OGPTE_API_KEY=your-h2ogpte-api-key-here\n\n# Snowflake Configuration (optional)\nSNOWFLAKE_ACCOUNT=your-account.snowflakecomputing.com\nSNOWFLAKE_USERNAME=your-username\nSNOWFLAKE_PASSWORD=your-password\nSNOWFLAKE_DATABASE=your-database\nSNOWFLAKE_WAREHOUSE=COMPUTE_WH\nSNOWFLAKE_SCHEMA=PUBLIC\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"step-1-upload-data-to-h2o-drive",children:"Step 1: Upload Data to H2O Drive"}),"\n",(0,s.jsx)(n.h3,{id:"11-connect-to-h2o-drive",children:"1.1 Connect to H2O Drive"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import os\nimport json\nimport asyncio\nfrom pathlib import Path\nfrom typing import Dict, List, Any, Tuple\n\n# H2O Drive imports\nimport h2o_drive\nimport h2o_discovery\nfrom dotenv import load_dotenv\n\n# Load environment variables\nload_dotenv()\n\n# Connect to H2O Drive\nprint("\ud83d\udd0c Connecting to H2O Drive...")\n\ntry:\n    # Discover H2O services\n    discovery = h2o_discovery.discover()\n    \n    # Connect to Drive\n    drive_client = h2o_drive.connect(discovery=discovery)\n    bucket = drive_client.user_bucket()\n    \n    print("\u2705 Connected to H2O Drive successfully!")\n    \n    # Test connection\n    objects = await bucket.list_objects()\n    print(f"\ud83d\udcc1 Found {len(objects)} objects in your Drive")\n    \nexcept Exception as e:\n    print(f"\u274c Failed to connect to H2O Drive: {e}")\n    print("Please check your H2O_CLOUD_ENVIRONMENT and H2O_CLOUD_CLIENT_PLATFORM_TOKEN")\n    raise\n'})}),"\n",(0,s.jsx)(n.h3,{id:"12-prepare-your-data-structure",children:"1.2 Prepare Your Data Structure"}),"\n",(0,s.jsx)(n.p,{children:"Organize your local data in the following structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"your_project_data/\n\u251c\u2500\u2500 schema_metadata/     # JSON files with table schemas\n\u251c\u2500\u2500 contexts/           # JSON and TXT files with business context\n\u2514\u2500\u2500 golden_examples/    # JSON files with query-SQL examples\n"})}),"\n",(0,s.jsx)(n.h3,{id:"13-load-and-upload-data",children:"1.3 Load and Upload Data"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def load_local_project_data(project_path: Path) -> Dict[str, List[Tuple[str, Any]]]:\n    """Load project data from local filesystem."""\n    project_data = {\n        "schema_metadata": [],\n        "contexts": [],\n        "golden_examples": []\n    }\n    \n    # Load schema metadata\n    schema_path = project_path / "schema_metadata"\n    if schema_path.exists():\n        for json_file in schema_path.glob("**/*.json"):\n            try:\n                with open(json_file, \'r\', encoding=\'utf-8\') as f:\n                    data = json.load(f)\n                    project_data["schema_metadata"].append((str(json_file), data))\n            except Exception as e:\n                print(f"\u26a0\ufe0f Error loading {json_file}: {e}")\n    \n    # Load contexts (JSON and TXT files)\n    contexts_path = project_path / "contexts"\n    if contexts_path.exists():\n        # JSON files\n        for json_file in contexts_path.glob("**/*.json"):\n            try:\n                with open(json_file, \'r\', encoding=\'utf-8\') as f:\n                    data = json.load(f)\n                    project_data["contexts"].append((str(json_file), data))\n            except Exception as e:\n                print(f"\u26a0\ufe0f Error loading {json_file}: {e}")\n        \n        # Text files\n        for txt_file in contexts_path.glob("**/*.txt"):\n            try:\n                with open(txt_file, \'r\', encoding=\'utf-8\') as f:\n                    data = f.read()\n                    project_data["contexts"].append((str(txt_file), data))\n            except Exception as e:\n                print(f"\u26a0\ufe0f Error loading {txt_file}: {e}")\n    \n    # Load golden examples\n    examples_path = project_path / "golden_examples"\n    if examples_path.exists():\n        for json_file in examples_path.glob("**/*.json"):\n            try:\n                with open(json_file, \'r\', encoding=\'utf-8\') as f:\n                    data = json.load(f)\n                    project_data["golden_examples"].append((str(json_file), data))\n            except Exception as e:\n                print(f"\u26a0\ufe0f Error loading {json_file}: {e}")\n    \n    return project_data\n\n# Load your data\nlocal_data_path = Path("path/to/your/data")  # Update this path\nproject_data = load_local_project_data(local_data_path)\n\nprint(f"\ud83d\udcca Loaded {sum(len(files) for files in project_data.values())} total files")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"14-upload-to-h2o-drive",children:"1.4 Upload to H2O Drive"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import tempfile\n\nasync def upload_data_to_drive(bucket, project_data: Dict[str, List[Tuple[str, Any]]], project_name: str = "my_project"):\n    """Upload project data to H2O Drive with organized structure."""\n    upload_results = {\n        "schema_metadata": {"success": 0, "failed": 0, "errors": []},\n        "contexts": {"success": 0, "failed": 0, "errors": []},\n        "golden_examples": {"success": 0, "failed": 0, "errors": []}\n    }\n    \n    for data_type, files in project_data.items():\n        if not files:\n            continue\n            \n        print(f"\ud83d\udce4 Uploading {len(files)} {data_type} files...")\n        \n        for file_path, data in files:\n            filename = Path(file_path).name\n            drive_key = f"{project_name}/{data_type}/{filename}"\n            \n            try:\n                # Create temporary file\n                with tempfile.NamedTemporaryFile(mode=\'w\', delete=False, suffix=\'.tmp\') as tmp_file:\n                    if isinstance(data, str):\n                        tmp_file.write(data)\n                    else:\n                        json.dump(data, tmp_file, indent=2, ensure_ascii=False)\n                    temp_path = tmp_file.name\n                \n                # Upload to Drive\n                await bucket.upload_file(temp_path, drive_key)\n                \n                # Clean up temp file\n                os.remove(temp_path)\n                \n                upload_results[data_type]["success"] += 1\n                print(f"  \u2705 Uploaded {filename}")\n                \n            except Exception as e:\n                upload_results[data_type]["failed"] += 1\n                upload_results[data_type]["errors"].append(f"{filename}: {str(e)}")\n                print(f"  \u274c Failed to upload {filename}: {e}")\n                \n                if \'temp_path\' in locals() and os.path.exists(temp_path):\n                    os.remove(temp_path)\n    \n    return upload_results\n\n# Upload the data\nproject_name = "home/my_uploaded_project"  # Keep the \'home/\' prefix\nupload_results = await upload_data_to_drive(bucket, project_data, project_name)\n\n# Display results\ntotal_success = sum(r["success"] for r in upload_results.values())\ntotal_failed = sum(r["failed"] for r in upload_results.values())\nprint(f"\ud83d\udcc8 Upload complete: {total_success} successful, {total_failed} failed")\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"step-2-configure-text2everything-api",children:"Step 2: Configure Text2Everything API"}),"\n",(0,s.jsx)(n.h3,{id:"21-initialize-the-sdk-client",children:"2.1 Initialize the SDK Client"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from text2everything_sdk import Text2EverythingClient\nfrom text2everything_sdk.exceptions import (\n    AuthenticationError,\n    ValidationError,\n    NotFoundError,\n    RateLimitError,\n    ServerError\n)\n\n# Initialize Text2Everything SDK\nprint("\ud83d\udd0c Initializing Text2Everything SDK...")\n\ntry:\n    sdk_client = Text2EverythingClient(\n        base_url=os.getenv("TEXT2EVERYTHING_URL"),\n        api_key=os.getenv("H2OGPTE_API_KEY"),\n        timeout=200,\n        max_retries=1\n    )\n    print("\u2705 Text2Everything SDK initialized successfully")\nexcept Exception as e:\n    print(f"\u274c SDK initialization failed: {e}")\n    raise\n'})}),"\n",(0,s.jsx)(n.h3,{id:"22-create-or-select-a-project",children:"2.2 Create or Select a Project"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# List existing projects\nt2e_projects = sdk_client.projects.list()\nprint(f"\ud83d\udccb Found {len(t2e_projects)} existing projects")\n\n# Option 1: Create a new project\nproject = sdk_client.projects.create(\n    name="H2O Drive Integration Project",\n    description="Project created for H2O Drive to Text2Everything integration"\n)\nprint(f"\u2705 Created project: {project.name} (ID: {project.id})")\n\n# Option 2: Use existing project\n# project = t2e_projects[0]  # Select first existing project\n'})}),"\n",(0,s.jsx)(n.h3,{id:"23-load-data-from-h2o-drive",children:"2.3 Load Data from H2O Drive"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Import the integration helper (assuming you have the drive_to_t2e_integration.py file)\nfrom drive_integration.drive_to_t2e_integration import DriveManager, prepare_data_for_sdk\n\n# Create Drive manager\ndrive_manager = DriveManager(bucket)\n\n# Load project data from H2O Drive\nselected_drive_project = "home/my_uploaded_project"  # Your uploaded project name\nproject_data = await drive_manager.load_project_data(selected_drive_project)\n\nprint(f"\ud83d\udce5 Loaded data from H2O Drive:")\nfor data_type, files in project_data.items():\n    print(f"   - {data_type}: {len(files)} files")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"24-prepare-and-upload-data-to-text2everything",children:"2.4 Prepare and Upload Data to Text2Everything"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Prepare data for SDK\nsdk_ready_data = prepare_data_for_sdk(project_data)\n\nprint(\"\ud83d\udd27 Data prepared for Text2Everything:\")\nfor data_type, items in sdk_ready_data.items():\n    print(f\"   - {data_type}: {len(items)} items\")\n\n# Upload data using bulk operations\nupload_results = {}\n\ntry:\n    # Upload contexts\n    if sdk_ready_data.get('contexts'):\n        print(f\"\ud83d\udce4 Uploading {len(sdk_ready_data['contexts'])} contexts...\")\n        contexts = sdk_client.contexts.bulk_create(\n            project_id=project.id,\n            contexts=sdk_ready_data['contexts']\n        )\n        upload_results['contexts'] = len(contexts)\n        print(f\"   \u2705 {len(contexts)} contexts uploaded\")\n\n    # Upload schema metadata\n    if sdk_ready_data.get('schema_metadata'):\n        print(f\"\ud83d\udce4 Uploading {len(sdk_ready_data['schema_metadata'])} schema metadata items...\")\n        schemas = sdk_client.schema_metadata.bulk_create(\n            project_id=project.id,\n            schema_metadata_list=sdk_ready_data['schema_metadata'],\n            validate=True\n        )\n        upload_results['schema_metadata'] = len(schemas)\n        print(f\"   \u2705 {len(schemas)} schema metadata items uploaded\")\n\n    # Upload golden examples\n    if sdk_ready_data.get('golden_examples'):\n        print(f\"\ud83d\udce4 Uploading {len(sdk_ready_data['golden_examples'])} golden examples...\")\n        examples = sdk_client.golden_examples.bulk_create(\n            project_id=project.id,\n            golden_examples=sdk_ready_data['golden_examples']\n        )\n        upload_results['golden_examples'] = len(examples)\n        print(f\"   \u2705 {len(examples)} golden examples uploaded\")\n\n    print(\"\ud83c\udf89 All data uploaded successfully to Text2Everything!\")\n\nexcept Exception as e:\n    print(f\"\u274c Upload failed: {e}\")\n    raise\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"step-3-configure-snowflake-connector",children:"Step 3: Configure Snowflake Connector"}),"\n",(0,s.jsx)(n.h3,{id:"31-snowflake-configuration",children:"3.1 Snowflake Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Snowflake connection configuration\nSNOWFLAKE_CONFIG = {\n    "account": os.getenv("SNOWFLAKE_ACCOUNT"),\n    "warehouse": os.getenv("SNOWFLAKE_WAREHOUSE", "COMPUTE_WH"),\n    "database": os.getenv("SNOWFLAKE_DATABASE"),\n    "schema": os.getenv("SNOWFLAKE_SCHEMA", "PUBLIC"),\n    "username": os.getenv("SNOWFLAKE_USERNAME"),\n    "password": os.getenv("SNOWFLAKE_PASSWORD"),\n    "role": "ANALYST_ROLE"  # Optional: adjust as needed\n}\n\nprint("\ud83d\udccb Snowflake Configuration:")\nprint(f"   Account: {SNOWFLAKE_CONFIG[\'account\']}")\nprint(f"   Database: {SNOWFLAKE_CONFIG[\'database\']}")\nprint(f"   Warehouse: {SNOWFLAKE_CONFIG[\'warehouse\']}")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"32-create-snowflake-connector",children:"3.2 Create Snowflake Connector"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Create Snowflake connector\nprint("\ud83d\udd0c Creating Snowflake connector...")\n\ntry:\n    snowflake_connector = sdk_client.connectors.create(\n        name="H2O Drive Analytics Warehouse",\n        description="Snowflake data warehouse for H2O Drive analytics and processed data",\n        db_type="snowflake",\n        host=SNOWFLAKE_CONFIG["account"],\n        port=443,  # Snowflake standard HTTPS port\n        username=SNOWFLAKE_CONFIG["username"],\n        password=SNOWFLAKE_CONFIG["password"],\n        database=SNOWFLAKE_CONFIG["database"],\n        config={\n            "warehouse": SNOWFLAKE_CONFIG["warehouse"],\n            "role": SNOWFLAKE_CONFIG.get("role")\n        }\n    )\n    \n    print("\u2705 Snowflake connector created successfully!")\n    print(f"   Connector ID: {snowflake_connector.id}")\n    print(f"   Name: {snowflake_connector.name}")\n    \n    # Test the connection\n    connection_ok = sdk_client.connectors.test_connection(snowflake_connector.id)\n    if connection_ok:\n        print("\u2705 Snowflake connection test successful!")\n    else:\n        print("\u26a0\ufe0f Snowflake connection test failed")\n    \nexcept Exception as e:\n    print(f"\u274c Failed to create Snowflake connector: {e}")\n    snowflake_connector = None\n'})}),"\n",(0,s.jsx)(n.h3,{id:"33-list-and-manage-connectors",children:"3.3 List and Manage Connectors"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# List all connectors\nall_connectors = sdk_client.connectors.list()\nsnowflake_connectors = [c for c in all_connectors if c.db_type.lower() == "snowflake"]\n\nprint(f"\ud83d\udccb Found {len(snowflake_connectors)} Snowflake connector(s):")\nfor connector in snowflake_connectors:\n    print(f"   \u2022 {connector.name} (ID: {connector.id})")\n    print(f"     Database: {connector.database}")\n    print(f"     Host: {connector.host}")\n\n# Store connector ID for future use\nif snowflake_connector:\n    SNOWFLAKE_CONNECTOR_ID = snowflake_connector.id\n    print(f"\ud83d\udcbe Snowflake Connector ID: {SNOWFLAKE_CONNECTOR_ID}")\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"step-4-configure-customgpt",children:"Step 4: Configure CustomGPT"}),"\n",(0,s.jsx)(n.h3,{id:"41-access-h2ogpte-ui",children:"4.1 Access H2OGPTE UI"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Navigate to: ",(0,s.jsx)(n.code,{children:"https://h2ogpte.you_domain_id.dedicated.h2o.ai/"})]}),"\n",(0,s.jsx)(n.li,{children:"Log in with your credentials"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"42-create-a-collection",children:"4.2 Create a Collection"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Go to Collections"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'Click on "Collections" in the main navigation'}),"\n",(0,s.jsx)(n.li,{children:'Click "Create Collection" or "+" button'}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Configure Collection Settings"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Collection Name: H2O Analytics Collection\nDescription: Collection for H2O data analysis and SQL generation\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"43-create-custom-prompt",children:"4.3 Create Custom Prompt"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Navigate to Prompts"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'Go to "Prompts" section'}),"\n",(0,s.jsx)(n.li,{children:'Click "Create Prompt" or "+" button'}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Configure Custom Prompt"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:' You will use:\n base_url = os.getenv("TEXT2EVERYTHING_URL") \n project_id = os.getenv("TEXT2EVERYTHING_PROJECT_ID")  \n connector_id = os.getenv("TEXT2EVERYTHING_CONNECTOR_ID")  \n api_key = os.getenv("H2OGPTE_API_KEY")  \n\nPrompt Name: H2O Drive SQL Assistant\n\nSystem Prompt:\nAs h2oGPTe, you are an AI system expert in answering questions created by H2O.ai. Your primary function is to answer questions using the Text2Everything API always first in order to gather the data.\n\n### Communication Guidelines\n\n - **Audience**: You are speaking to C-level executives and business users\n - **Style**: Clear, concise, business language, to the point\n - **Length**: Be brief\n - **Recommendations**: Only provide recommendations if specifically asked\n - **Technical details**: Omit technical information or terms\n - **File references**: Do not mention generated files in your response\n - **Visualizations**: Include graphs when they provide greater clarity\n - **Content**: Never create synthetic data, only provide analysis from the resulting query of the Text2Everything API\n\n\n ## API Configuration\n\n ### Environment Variables\n ```python\n base_url = os.getenv("TEXT2EVERYTHING_URL") # Already set up\n project_id = os.getenv("TEXT2EVERYTHING_PROJECT_ID")  # Already set up\n connector_id = os.getenv("TEXT2EVERYTHING_CONNECTOR_ID")  # Already set up\n api_key = os.getenv("H2OGPTE_API_KEY")  # Already set up\n'})}),"\n",(0,s.jsx)(n.h3,{id:"headers",children:"Headers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'headers = {\n    "accept": "application/json",\n    "Content-Type": "application/json",\n    "X-API-Key": api_key  # Changed from Authorization Bearer\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"...\n...\n..."}),"\n",(0,s.jsx)(n.h3,{id:"formulate-business-oriented-response",children:"Formulate Business-Oriented Response"}),"\n",(0,s.jsx)(n.p,{children:"When formulating your response:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Start with the key insight"}),": Begin with the most important finding"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use business terminology"}),": Translate technical database terms to business language"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Be concise"}),": Keep explanations brief and to the point"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Include visuals"}),": Reference any generated visualizations if they add clarity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Avoid technical details"}),": Don't mention API calls, SQL queries, or data processing steps"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"44-configure-tools-and-settings",children:"4.4 Configure Tools and Settings"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Enable Tools"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'Enable "Python" for enabling programming'}),"\n",(0,s.jsx)(n.li,{children:'Enable "Shell scripting" if needed for internal reasoning'}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Model Settings and agentic settings"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Model: claude-3.7 (recommended for higher agentic accuracy)\nAgent accuracy: 'basic' (around 10 reasoning iterations)\nMax Agent Turn Time: 180 (to enable enough time for the API to respond)\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Collection Integration"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Attach your created collection to the prompt"}),"\n",(0,s.jsx)(n.li,{children:"Apply current settings as collections defaults"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"step-5-setup-agent-environment",children:"Step 5: Setup Agent Environment"}),"\n",(0,s.jsx)(n.h3,{id:"51-access-agent-configuration",children:"5.1 Access Agent Configuration"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Navigate to Agents Section"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Go to the H2OGPTE UI"}),"\n",(0,s.jsx)(n.li,{children:'Click on "Agents" in the main navigation'}),"\n",(0,s.jsx)(n.li,{children:"Select your agent or create a new one"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"52-configure-authentication",children:"5.2 Configure Authentication"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Go to Authentication Tab"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'Click on the "Authentication" tab in the agent settings'}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Add Keys (Environment Variables)"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Text2Everything Configuration\nTEXT2EVERYTHING_URL = "http://text2everything.text2everything.svc.cluster.local:8000"\nTEXT2EVERYTHING_PROJECT_ID = "<your_project_id>"\nTEXT2EVERYTHING_CONNECTOR_ID = "<your_connector_id>"\n\n# H2OGPTE API Configuration\nH2OGPTE_API_KEY = "<your_api_key>"\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Replace Placeholder Values"}),":\nThe values here correspond to the ids generated when interacting with the T2E SDK."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"53-test-the-customgpt",children:"5.3 Test the CustomGPT"}),"\n",(0,s.jsx)(n.p,{children:"Now that the agent environment is configured, you can test the CustomGPT:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Create a Test Chat"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Go to collections, and find the ",(0,s.jsx)(n.code,{children:"H2O Analytics Collection"})," collection"]}),"\n",(0,s.jsxs)(n.li,{children:["Click on ",(0,s.jsx)(n.code,{children:"+ New Chat"})]}),"\n",(0,s.jsxs)(n.li,{children:["Test with sample queries like:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'"Show me the top 10 customers by revenue"\n"What are the monthly sales trends?"\n"Find customers who haven\'t placed orders in the last 90 days"\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Validate Results"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Check that the CustomGPT can access the Text2Everything API"}),"\n",(0,s.jsx)(n.li,{children:"Verify that response is correct."}),"\n",(0,s.jsx)(n.li,{children:"Ensure business rules are applied correctly"}),"\n",(0,s.jsx)(n.li,{children:"Confirm that results are presented in business-friendly language"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"end-to-end-workflow-example",children:"End-to-End Workflow Example"}),"\n",(0,s.jsx)(n.h3,{id:"complete-integration-test",children:"Complete Integration Test"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'async def end_to_end_workflow_test():\n    """Complete end-to-end workflow test."""\n    \n    print("\ud83d\ude80 Starting end-to-end workflow test...")\n    \n    # 1. Verify H2O Drive connection\n    print("\\n1\ufe0f\u20e3 Testing H2O Drive connection...")\n    objects = await bucket.list_objects()\n    print(f"   \u2705 H2O Drive: {len(objects)} objects accessible")\n    \n    # 2. Verify Text2Everything connection\n    print("\\n2\ufe0f\u20e3 Testing Text2Everything connection...")\n    projects = sdk_client.projects.list()\n    print(f"   \u2705 Text2Everything: {len(projects)} projects accessible")\n    \n    # 3. Test Snowflake connector (if available)\n    if snowflake_connector:\n        print("\\n3\ufe0f\u20e3 Testing Snowflake connector...")\n        connection_ok = sdk_client.connectors.test_connection(snowflake_connector.id)\n        print(f"   \u2705 Snowflake: Connection {\'successful\' if connection_ok else \'failed\'}")\n    \n    # 4. Test SQL generation\n    print("\\n4\ufe0f\u20e3 Testing SQL generation...")\n    try:\n        # Create a chat session\n        session = sdk_client.chat_sessions.create(project_id=project.id)\n        \n        # Generate SQL\n        response = sdk_client.chat.chat_to_sql(\n            project_id=project.id,\n            chat_session_id=session.id,\n            query="Show me a count of all records in the main table"\n        )\n        \n        print(f"   \u2705 Generated SQL: {response.sql_query[:100]}...")\n        \n    except Exception as e:\n        print(f"   \u274c SQL generation failed: {e}")\n    \n    # 5. Test with Snowflake execution (if connector available)\n    if snowflake_connector:\n        print("\\n5\ufe0f\u20e3 Testing SQL execution with Snowflake...")\n        try:\n            answer_response = sdk_client.chat.chat_to_answer(\n                project_id=project.id,\n                chat_session_id=session.id,\n                query="Count the total number of records",\n                connector_id=snowflake_connector.id\n            )\n            print(f"   \u2705 Query executed successfully")\n            print(f"   \ud83d\udcca Result: {answer_response.answer[:200]}...")\n            \n        except Exception as e:\n            print(f"   \u26a0\ufe0f SQL execution test skipped: {e}")\n    \n    print("\\n\ud83c\udf89 End-to-end workflow test complete!")\n\n# Run the test\nawait end_to_end_workflow_test()\n'})}),"\n",(0,s.jsx)(n.h3,{id:"production-usage-example",children:"Production Usage Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def production_query_example():\n    """Example of production usage."""\n    \n    # Create a new chat session for production use\n    session = sdk_client.chat_sessions.create(project_id=project.id)\n    \n    # Example business queries\n    business_queries = [\n        "What are our top 10 customers by total revenue?",\n        "Show me monthly sales trends for the last 12 months",\n        "Find customers who haven\'t placed orders in the last 90 days",\n        "What\'s the average order value by customer segment?"\n    ]\n    \n    print("\ud83d\udcca Production Query Examples:")\n    \n    for i, query in enumerate(business_queries, 1):\n        print(f"\\n{i}. Query: {query}")\n        \n        try:\n            # Generate SQL\n            sql_response = sdk_client.chat.chat_to_sql(\n                project_id=project.id,\n                chat_session_id=session.id,\n                query=query\n            )\n            \n            print(f"   Generated SQL: {sql_response.sql_query}")\n            \n            # Execute if Snowflake connector is available\n            if snowflake_connector:\n                answer_response = sdk_client.chat.chat_to_answer(\n                    project_id=project.id,\n                    chat_session_id=session.id,\n                    query=query,\n                    connector_id=snowflake_connector.id\n                )\n                print(f"   Result: {answer_response.answer[:100]}...")\n            \n        except Exception as e:\n            print(f"   \u274c Error: {e}")\n\n# Run production examples\nproduction_query_example()\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,s.jsx)(n.h4,{id:"1-h2o-drive-connection-issues",children:"1. H2O Drive Connection Issues"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem"}),": ",(0,s.jsx)(n.code,{children:"Failed to connect to H2O Drive"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Solution: Verify environment variables\nprint("H2O Environment:", os.getenv(\'H2O_CLOUD_ENVIRONMENT\'))\nprint("H2O Token:", os.getenv(\'H2O_CLOUD_CLIENT_PLATFORM_TOKEN\')[:10] + "..." if os.getenv(\'H2O_CLOUD_CLIENT_PLATFORM_TOKEN\') else "Not set")\n\n# Check token validity\ntry:\n    discovery = h2o_discovery.discover()\n    print("\u2705 H2O Discovery successful")\nexcept Exception as e:\n    print(f"\u274c H2O Discovery failed: {e}")\n'})}),"\n",(0,s.jsx)(n.h4,{id:"2-text2everything-api-issues",children:"2. Text2Everything API Issues"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem"}),": ",(0,s.jsx)(n.code,{children:"Authentication failed"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Solution: Verify API key and URL\nprint("T2E URL:", os.getenv(\'TEXT2EVERYTHING_URL\'))\nprint("API Key:", os.getenv(\'H2OGPTE_API_KEY\')[:10] + "..." if os.getenv(\'H2OGPTE_API_KEY\') else "Not set")\n\n# Test basic connection\ntry:\n    test_client = Text2EverythingClient(\n        base_url=os.getenv(\'TEXT2EVERYTHING_URL\'),\n        api_key=os.getenv(\'H2OGPTE_API_KEY\')\n    )\n    projects = test_client.projects.list()\n    print(f"\u2705 API connection successful, {len(projects)} projects found")\nexcept Exception as e:\n    print(f"\u274c API connection failed: {e}")\n'})}),"\n",(0,s.jsx)(n.h4,{id:"3-snowflake-connector-issues",children:"3. Snowflake Connector Issues"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem"}),": ",(0,s.jsx)(n.code,{children:"Snowflake connection test failed"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Solution: Verify Snowflake credentials\ndef debug_snowflake_connection():\n    print(\"Snowflake Debug Info:\")\n    print(f\"   Account: {os.getenv('SNOWFLAKE_ACCOUNT')}\")\n    print(f\"   Username: {os.getenv('SNOWFLAKE_USERNAME')}\")\n    print(f\"   Database: {os.getenv('SNOWFLAKE_DATABASE')}\")\n    print(f\"   Warehouse: {os.getenv('SNOWFLAKE_WAREHOUSE')}\")\n    \n    # Test with minimal connection\n    try:\n        import snowflake.connector\n        conn = snowflake.connector.connect(\n            user=os.getenv('SNOWFLAKE_USERNAME'),\n            password=os.getenv('SNOWFLAKE_PASSWORD'),\n            account=os.getenv('SNOWFLAKE_ACCOUNT'),\n            warehouse=os.getenv('SNOWFLAKE_WAREHOUSE'),\n            database=os.getenv('SNOWFLAKE_DATABASE')\n        )\n        print(\"\u2705 Direct Snowflake connection successful\")\n        conn.close()\n    except Exception as e:\n        print(f\"\u274c Direct Snowflake connection failed: {e}\")\n\ndebug_snowflake_connection()\n"})}),"\n",(0,s.jsx)(n.h4,{id:"4-data-upload-issues",children:"4. Data Upload Issues"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem"}),": ",(0,s.jsx)(n.code,{children:"Validation error during bulk upload"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Solution"}),": Use the SDK's built-in ",(0,s.jsx)(n.code,{children:"validate_schema"})," method to check schema metadata before upload."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Validate table schema\ntable_schema = {\n    "table": {\n        "name": "customers",\n        "columns": [{"name": "id", "type": "INTEGER"}]\n    }\n}\n\nerrors = sdk_client.schema_metadata.validate_schema(table_schema, "table")\nif errors:\n    print(f"\u274c Validation errors: {errors}")\nelse:\n    print("\u2705 Schema is valid")\n\n# Validate dimension schema\ndimension_schema = {\n    "table": {\n        "name": "customers",\n        "dimension": {\n            "name": "status",\n            "content": {\n                "type": "categorical",\n                "values": ["active", "inactive"]\n            }\n        }\n    }\n}\n\nerrors = sdk_client.schema_metadata.validate_schema(dimension_schema, "dimension")\nif errors:\n    print(f"\u274c Dimension validation errors: {errors}")\nelse:\n    print("\u2705 Dimension schema is valid")\n\n# Validate metric schema\nmetric_schema = {\n    "table": {\n        "name": "orders",\n        "metric": {\n            "name": "total_revenue",\n            "content": {\n                "aggregation": "sum",\n                "column": "amount"\n            }\n        }\n    }\n}\n\nerrors = sdk_client.schema_metadata.validate_schema(metric_schema, "metric")\nif errors:\n    print(f"\u274c Metric validation errors: {errors}")\nelse:\n    print("\u2705 Metric schema is valid")\n'})}),"\n",(0,s.jsx)(n.h4,{id:"5-performance-optimization",children:"5. Performance Optimization"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem"}),": Slow upload or query performance"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Solution: Implement batch processing and connection pooling\nasync def optimized_upload(sdk_client, project_id, data, batch_size=10):\n    """Upload data in optimized batches."""\n    \n    for data_type, items in data.items():\n        if not items:\n            continue\n            \n        print(f"\ud83d\udce4 Uploading {len(items)} {data_type} in batches of {batch_size}")\n        \n        # Process in batches\n        for i in range(0, len(items), batch_size):\n            batch = items[i:i+batch_size]\n            \n            try:\n                if data_type == \'contexts\':\n                    result = sdk_client.contexts.bulk_create(\n                        project_id=project_id,\n                        contexts=batch\n                    )\n                elif data_type == \'schema_metadata\':\n                    result = sdk_client.schema_metadata.bulk_create(\n                        project_id=project_id,\n                        schema_metadata_list=batch\n                    )\n                elif data_type == \'golden_examples\':\n                    result = sdk_client.golden_examples.bulk_create(\n                        project_id=project_id,\n                        golden_examples=batch\n                    )\n                \n                print(f"   \u2705 Batch {i//batch_size + 1}: {len(result)} items uploaded")\n                \n            except Exception as e:\n                print(f"   \u274c Batch {i//batch_size + 1} failed: {e}")\n\n# Use optimized upload\n# await optimized_upload(sdk_client, project.id, sdk_ready_data)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"getting-help",children:"Getting Help"}),"\n",(0,s.jsx)(n.p,{children:"If you encounter issues not covered here:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Check the logs"}),": Enable verbose logging in your environment"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Verify credentials"}),": Ensure all API keys and tokens are valid"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Test connections"}),": Use the diagnostic functions provided above"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Check documentation"}),": Refer to the ",(0,s.jsx)(n.a,{href:"https://h2oai.github.io/text-2-everything-py/",children:"Text2Everything SDK documentation"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Contact support"}),": Email ",(0,s.jsx)(n.a,{href:"mailto:support@h2o.ai",children:"support@h2o.ai"})," with detailed error messages"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsx)(n.p,{children:"After completing this guide, you should have:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Data in H2O Drive"}),": Your project data organized and uploaded"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Text2Everything Project"}),": Configured with contexts, schemas, and examples"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Snowflake Connector"}),": Database connectivity for SQL execution"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"CustomGPT Setup"}),": AI assistant configured for your data"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Agent Environment"}),": Production-ready environment variables"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"recommended-next-actions",children:"Recommended Next Actions"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Expand Your Data"}),": Add more contexts, schemas, and golden examples"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Optimize Performance"}),": Change context, schemas, golden examples and feedback limits"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Train Your Team"}),": Share this guide with your development team"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Iterate and Improve"}),": Continuously refine your prompts and examples. Add feedback whenever possible."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://h2oai.github.io/text-2-everything-py/",children:"Text2Everything SDK Documentation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.h2o.ai/h2o-drive/",children:"H2O Drive Documentation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/text2everything/guides/connectors",children:"Snowflake Connector Guide"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/text2everything/how-to/bulk_operations",children:"Bulk Operations Guide"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/text2everything/how-to/jupyter",children:"Jupyter Integration Guide"})}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Happy coding! \ud83d\ude80"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"This guide was created to help developers and data scientists quickly get started with the Text2Everything ecosystem. For questions or improvements, please reach out to the H2O.ai team."})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(6540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);